{"version":3,"sources":["store/contacts/action-types.js","store/contacts/actions.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","store/contacts/selectors.js","components/Filter/Filter.jsx","App.js","store/contacts/reducer.js","store/store.js","index.js"],"names":["ActionType","contactsActions","addContact","createAction","contact","payload","id","shortid","generate","deleteContact","changeFilter","FormWrapper","styled","form","ContactForm","useState","name","setName","number","setNumber","nameId","numberId","dispatch","useDispatch","handleInputChange","event","target","value","Error","reset","onSubmit","preventDefault","Form","Label","htmlFor","Control","type","pattern","title","required","onChange","Button","variant","Item","li","ContactListItem","onDelete","href","onClick","List","ul","ContactList","contacts","map","getFilter","state","filter","getVisibleContacts","items","getContacts","toLowerCase","includes","label","Filter","useSelector","filterId","placeholder","App","className","length","Alert","createReducer","actions","_","findIndex","toast","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","todosPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c87c6373.chunk.js","sourcesContent":["const ActionType = {\n    ADD_CONTACT: 'contacts/add',\n    DELETE_CONTACT: 'contacts/delete',\n    CHANGE_FILTER: 'contacts/changeFilter',\n};\n\nexport { ActionType };\n","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\nimport { ActionType } from './action-types';\n\nconst addContact = createAction(ActionType.ADD_CONTACT, contact => ({\n    payload: {\n        id: shortid.generate(),\n        ...contact,\n    },\n}));\n\nconst deleteContact = createAction(ActionType.DELETE_CONTACT);\n\nconst changeFilter = createAction(ActionType.CHANGE_FILTER);\n\nconst contactsActions = {\n    addContact,\n    deleteContact,\n    changeFilter,\n};\nexport default contactsActions;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport shortid from 'shortid';\nimport { Button, Form } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nimport contactsActions from '../../store/contacts/actions';\n\nconst FormWrapper = styled.form`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    max-width: 400px;\n    width: 100%;\n    margin: 0 auto 20px;\n`;\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameId = shortid.generate();\n    const numberId = shortid.generate();\n    const dispatch = useDispatch();\n\n    const handleInputChange = event => {\n        const { value, name } = event.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                throw new Error(`Unknown input ${name}`);\n        }\n    };\n    const handleSubmit = event => {\n        event.preventDefault();\n        dispatch(contactsActions.addContact({ name, number }));\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n    return (\n        <FormWrapper onSubmit={handleSubmit}>\n            <Form.Label htmlFor={nameId}>\n                Name\n                <Form.Control\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}\n                    id={nameId}\n                />\n            </Form.Label>\n            <Form.Label htmlFor={numberId}>\n                Number\n                <Form.Control\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleInputChange}\n                    id={numberId}\n                />\n            </Form.Label>\n            <Button variant=\"outline-dark\" type=\"sumbit\">\n                Add contact\n            </Button>\n        </FormWrapper>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\n\nconst Item = styled.li`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport default function ContactListItem({ contact, onDelete }) {\n    return (\n        <Item>\n            <p>{contact.name}</p>\n            <a href={'tel:' + contact.number}>{contact.number}</a>\n            <Button\n                variant=\"outline-dark\"\n                type=\"button\"\n                onClick={() => {\n                    onDelete(contact.id);\n                }}\n            >\n                Delete\n            </Button>\n        </Item>\n    );\n}\nContactListItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport ContactListItem from '../ContactListItem/';\nimport styled from 'styled-components';\n\nimport contactsActions from '../../store/contacts/actions';\n\nconst List = styled.ul`\n    margin-top: 20px;\n`;\n\nexport default function ContactList({ contacts }) {\n    const dispatch = useDispatch();\n\n    const onDelete = id => dispatch(contactsActions.deleteContact(id));\n\n    return (\n        <List>\n            {contacts.map(contact => (\n                <ContactListItem\n                    key={contact.id}\n                    contact={contact}\n                    onDelete={onDelete}\n                />\n            ))}\n        </List>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n};\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n    const contacts = getContacts(state);\n    const filter = getFilter(state);\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport styled from 'styled-components';\nimport { Form } from 'react-bootstrap';\n\nimport contactsActions from '../../store/contacts/actions';\nimport { getFilter } from '../../store/contacts/selectors';\n\nconst Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    max-width: 400px;\n    width: 100%;\n    margin: 0 auto;\n`;\n\nexport default function Filter({ title }) {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const onChange = value => dispatch(contactsActions.changeFilter(value));\n\n    const handleFilterChange = event => {\n        const { value } = event.target;\n        onChange(value.toLowerCase());\n    };\n\n    const filterId = shortid.generate();\n    return (\n        <Label htmlFor={filterId}>\n            <span>{title}</span>\n            <Form.Control\n                type=\"text\"\n                name=\"filter\"\n                required\n                value={filter}\n                onChange={handleFilterChange}\n                placeholder=\"Search...\"\n                id={filterId}\n            />\n        </Label>\n    );\n}\nFilter.propTypes = {\n    title: PropTypes.string,\n};\n","import { useSelector } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport './App.css';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter/';\r\nimport { getVisibleContacts } from './store/contacts/selectors';\r\n\r\nexport default function App() {\r\n    const contacts = useSelector(getVisibleContacts);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Phonebook</h1>\r\n            <ContactForm />\r\n            <h2>Contacts</h2>\r\n            <Filter title={'Find contacts by name'} />\r\n            {contacts.length ? (\r\n                <ContactList contacts={contacts} />\r\n            ) : (\r\n                <Alert className=\"Alert\" variant=\"dark\">\r\n                    Nothing found\r\n                </Alert>\r\n            )}\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport actions from './actions';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst items = createReducer([], {\n    [actions.addContact]: (state, { payload }) => {\n        const { name } = payload;\n        const idx = state.findIndex(\n            contact => contact.name.toLowerCase() === name.toLowerCase(),\n        );\n        if (idx !== -1) {\n            toast(`${name} is already in contacts`);\n            return state;\n        }\n        const newState = [...state, payload];\n        return newState;\n    },\n    [actions.deleteContact]: (state, { payload }) => {\n        const newState = state.filter(({ id }) => id !== payload);\n        return newState;\n    },\n});\nexport default combineReducers({ items, filter });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/reducer';\n\nconst middleware = [\n    ...getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    }),\n];\n\nconst todosPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n    reducer: {\n        contacts: persistReducer(todosPersistConfig, contactsReducer),\n    },\n    middleware,\n});\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}